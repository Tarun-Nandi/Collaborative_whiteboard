"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_pdf_ts";
exports.ids = ["_ssr_lib_pdf_ts"];
exports.modules = {

/***/ "(ssr)/./lib/pdf.ts":
/*!********************!*\
  !*** ./lib/pdf.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatPDFError: () => (/* binding */ formatPDFError),\n/* harmony export */   loadPdfFromFile: () => (/* binding */ loadPdfFromFile),\n/* harmony export */   loadPdfWithPassword: () => (/* binding */ loadPdfWithPassword),\n/* harmony export */   processPDFFile: () => (/* binding */ processPDFFile),\n/* harmony export */   renderPdfPageToDataURL: () => (/* binding */ renderPdfPageToDataURL)\n/* harmony export */ });\n/* __next_internal_client_entry_do_not_use__ loadPdfFromFile,loadPdfWithPassword,renderPdfPageToDataURL,processPDFFile,formatPDFError auto */ // Dynamic imports to avoid SSR issues\nlet pdfjsLib = null;\nconst loadPDFJS = async ()=>{\n    if (pdfjsLib) return pdfjsLib;\n    if (true) return null;\n    try {\n        pdfjsLib = await __webpack_require__.e(/*! import() */ \"vendor-chunks/pdfjs-dist@5.4.149\").then(__webpack_require__.bind(__webpack_require__, /*! pdfjs-dist */ \"(ssr)/../node_modules/.pnpm/pdfjs-dist@5.4.149/node_modules/pdfjs-dist/build/pdf.mjs\"));\n        // Configure worker path for Next.js (served from /public)\n        pdfjsLib.GlobalWorkerOptions.workerSrc = \"/pdf.worker.min.js\";\n        return pdfjsLib;\n    } catch (error) {\n        console.error(\"Failed to load PDF.js:\", error);\n        return null;\n    }\n};\n// Load PDF from file with proper error handling\nasync function loadPdfFromFile(file) {\n    const pdfjs = await loadPDFJS();\n    if (!pdfjs) {\n        const error = new Error(\"PDF.js failed to load\");\n        error.type = \"missing-worker\";\n        error.message = \"PDF worker missing (dev): run pnpm -C web postinstall & restart dev.\";\n        throw error;\n    }\n    try {\n        const buffer = new Uint8Array(await file.arrayBuffer());\n        const pdf = await pdfjs.getDocument({\n            data: buffer\n        }).promise;\n        return pdf;\n    } catch (error) {\n        const pdfError = new Error(\"Failed to load PDF\");\n        if (error.name === \"PasswordException\") {\n            pdfError.type = \"password-required\";\n            pdfError.message = \"This PDF requires a password\";\n        } else if (error.name === \"InvalidPDFException\") {\n            pdfError.type = \"corrupted\";\n            pdfError.message = \"This PDF file appears to be corrupted or invalid\";\n        } else if (error.message?.includes(\"worker\")) {\n            pdfError.type = \"missing-worker\";\n            pdfError.message = \"PDF worker missing (dev): run pnpm -C web postinstall & restart dev.\";\n        } else {\n            pdfError.type = \"unknown\";\n            pdfError.message = `Failed to process PDF: ${error.message || \"Unknown error\"}`;\n        }\n        pdfError.originalError = error;\n        throw pdfError;\n    }\n}\n// Load PDF with password support\nasync function loadPdfWithPassword(file, getPassword) {\n    const pdfjs = await loadPDFJS();\n    if (!pdfjs) {\n        const error = new Error(\"PDF.js failed to load\");\n        error.type = \"missing-worker\";\n        error.message = \"PDF worker missing (dev): run pnpm -C web postinstall & restart dev.\";\n        throw error;\n    }\n    try {\n        const buffer = new Uint8Array(await file.arrayBuffer());\n        const loadingTask = pdfjs.getDocument({\n            data: buffer\n        });\n        loadingTask.onPassword = async (updatePassword, reason)=>{\n            // reason === 1: need password, 2: wrong password\n            const isRetry = reason === 2;\n            const password = await getPassword();\n            if (password === null) {\n                // User cancelled\n                throw new Error(\"Password required\");\n            }\n            updatePassword(password);\n        };\n        return await loadingTask.promise;\n    } catch (error) {\n        const pdfError = new Error(\"Failed to load PDF\");\n        if (error.message === \"Password required\") {\n            pdfError.type = \"password-required\";\n            pdfError.message = \"Password is required to open this PDF\";\n        } else if (error.name === \"PasswordException\") {\n            pdfError.type = \"wrong-password\";\n            pdfError.message = \"Incorrect password\";\n        } else {\n            pdfError.type = \"unknown\";\n            pdfError.message = `Failed to process PDF: ${error.message || \"Unknown error\"}`;\n        }\n        pdfError.originalError = error;\n        throw pdfError;\n    }\n}\n// Render PDF page to high-quality data URL\nasync function renderPdfPageToDataURL(pdf, pageNumber, scale = 2.0) {\n    try {\n        const page = await pdf.getPage(pageNumber);\n        const viewport = page.getViewport({\n            scale\n        });\n        const canvas = document.createElement(\"canvas\");\n        const context = canvas.getContext(\"2d\");\n        canvas.width = Math.floor(viewport.width);\n        canvas.height = Math.floor(viewport.height);\n        const renderContext = {\n            canvasContext: context,\n            viewport: viewport\n        };\n        await page.render(renderContext).promise;\n        return {\n            dataURL: canvas.toDataURL(\"image/png\", 0.95),\n            width: canvas.width,\n            height: canvas.height,\n            pageNumber\n        };\n    } catch (error) {\n        throw new Error(`Failed to render page ${pageNumber}: ${error.message}`);\n    }\n}\n// Create password prompt dialog\nfunction createPasswordDialog(isRetry = false) {\n    return new Promise((resolve)=>{\n        const overlay = document.createElement(\"div\");\n        overlay.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.5);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      z-index: 10000;\n    `;\n        const dialog = document.createElement(\"div\");\n        dialog.style.cssText = `\n      background: white;\n      padding: 24px;\n      border-radius: 8px;\n      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\n      min-width: 400px;\n    `;\n        const title = document.createElement(\"h3\");\n        title.textContent = isRetry ? \"Incorrect Password\" : \"Password Required\";\n        title.style.cssText = `\n      margin: 0 0 16px 0;\n      font-size: 18px;\n      font-weight: 600;\n      color: ${isRetry ? \"#dc2626\" : \"#1f2937\"};\n    `;\n        const message = document.createElement(\"p\");\n        message.textContent = isRetry ? \"The password you entered is incorrect. Please try again.\" : \"This PDF is password protected. Please enter the password to continue.\";\n        message.style.cssText = `\n      margin: 0 0 16px 0;\n      color: #6b7280;\n    `;\n        const input = document.createElement(\"input\");\n        input.type = \"password\";\n        input.placeholder = \"Enter password\";\n        input.style.cssText = `\n      width: 100%;\n      padding: 12px;\n      border: 1px solid #d1d5db;\n      border-radius: 6px;\n      font-size: 14px;\n      margin-bottom: 16px;\n      box-sizing: border-box;\n    `;\n        const buttonContainer = document.createElement(\"div\");\n        buttonContainer.style.cssText = `\n      display: flex;\n      gap: 12px;\n      justify-content: flex-end;\n    `;\n        const cancelButton = document.createElement(\"button\");\n        cancelButton.textContent = \"Cancel\";\n        cancelButton.style.cssText = `\n      padding: 10px 20px;\n      border: 1px solid #d1d5db;\n      border-radius: 6px;\n      background: white;\n      cursor: pointer;\n      font-weight: 500;\n    `;\n        const submitButton = document.createElement(\"button\");\n        submitButton.textContent = \"Open PDF\";\n        submitButton.style.cssText = `\n      padding: 10px 20px;\n      border: none;\n      border-radius: 6px;\n      background: #3b82f6;\n      color: white;\n      cursor: pointer;\n      font-weight: 500;\n    `;\n        const cleanup = ()=>{\n            if (document.body.contains(overlay)) {\n                document.body.removeChild(overlay);\n            }\n        };\n        const handleSubmit = ()=>{\n            const password = input.value.trim();\n            if (password) {\n                cleanup();\n                resolve(password);\n            }\n        };\n        const handleCancel = ()=>{\n            cleanup();\n            resolve(null);\n        };\n        cancelButton.addEventListener(\"click\", handleCancel);\n        submitButton.addEventListener(\"click\", handleSubmit);\n        input.addEventListener(\"keydown\", (e)=>{\n            if (e.key === \"Enter\") {\n                handleSubmit();\n            } else if (e.key === \"Escape\") {\n                handleCancel();\n            }\n        });\n        // Close on outside click\n        overlay.addEventListener(\"click\", (e)=>{\n            if (e.target === overlay) {\n                handleCancel();\n            }\n        });\n        buttonContainer.appendChild(cancelButton);\n        buttonContainer.appendChild(submitButton);\n        dialog.appendChild(title);\n        dialog.appendChild(message);\n        dialog.appendChild(input);\n        dialog.appendChild(buttonContainer);\n        overlay.appendChild(dialog);\n        document.body.appendChild(overlay);\n        input.focus();\n    });\n}\n// Main PDF processing function with all error handling\nasync function processPDFFile(file, onSuccess, onError) {\n    try {\n        // First try without password\n        const pdf = await loadPdfFromFile(file);\n        onSuccess(pdf);\n    } catch (error) {\n        if (error.type === \"password-required\") {\n            // Try with password prompt\n            try {\n                let attempts = 0;\n                const getPassword = async ()=>{\n                    attempts++;\n                    const isRetry = attempts > 1;\n                    return await createPasswordDialog(isRetry);\n                };\n                const pdf = await loadPdfWithPassword(file, getPassword);\n                onSuccess(pdf);\n            } catch (passwordError) {\n                onError(passwordError);\n            }\n        } else {\n            onError(error);\n        }\n    }\n}\n// Helper function to format error messages for user display\nfunction formatPDFError(error) {\n    switch(error.type){\n        case \"missing-worker\":\n            return \"❌ PDF worker missing (dev): run pnpm -C web postinstall & restart dev.\";\n        case \"password-required\":\n            return \"\\uD83D\\uDD12 This PDF requires a password to open.\";\n        case \"wrong-password\":\n            return \"❌ Incorrect password. Please try again.\";\n        case \"corrupted\":\n            return \"❌ This PDF file appears to be corrupted or invalid.\";\n        case \"cors-blocked\":\n            return \"❌ Cannot access this PDF due to security restrictions. Try uploading the file directly.\";\n        default:\n            return `❌ Failed to process PDF: ${error.message}`;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/pdf.ts\n");

/***/ })

};
;